var IndexedMongo=function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);t.IndexedClient=n.IndexedClient},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(2);t.IndexedClient=class e{constructor(e){}close(e){return Promise.resolve(this.db.close())}static connect(t,r){const s=new e(t);return n.Db.open(t).then(e=>(s.db=e,s))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3);class s{constructor(e){this.idb=e,this.collectionQueue=new Set}static open(e,t){const r=self.indexedDB.open(e);return new Promise((e,t)=>{r.addEventListener("error",t),r.addEventListener("success",function(t){let n=new s(r.result);e(n)}),r.onblocked=(e=>{console.log("blocked")})})}get version(){return this.idb?this.idb.version:0}createCollection(e,t={autoIncrement:!0}){if(this.idb.objectStoreNames.contains(e))throw new Error("Collection already exists");if(!this.collectionQueue.size&&!this.DBOpenRequest){let e=this.version+1;this.idb.close(),this.DBOpenRequest=self.indexedDB.open(this.idb.name,e)}return this.collectionQueue.add(e),new Promise((r,s)=>{this.DBOpenRequest.addEventListener("error",s),this.DBOpenRequest.addEventListener("upgradeneeded",s=>{let o=this.DBOpenRequest.result;this.idb=o;const i=o.createObjectStore(e,t);i.transaction.addEventListener("complete",t=>{let s=new n.Collection(i,this.idb);this.collectionQueue.delete(e),r(s)})}),this.DBOpenRequest.onsuccess=(e=>{if(this.collectionQueue.size||!this.DBOpenRequest)throw new Error("Not all collections were created");this.DBOpenRequest=null})})}collection(e){const t=this.idb.transaction(e).objectStore(e);return new n.Collection(t,this.idb)}close(){this.idb.close()}}t.Db=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(4),s=!0;t.Collection=class{constructor(e,t){this.store=e,this.idb=t}insertOne(e,t){return this.insertMany([e],t).then(e=>({insertedCount:1,insertedId:e.insertedIds[0]}))}insertMany(e,t){return new Promise((t,r)=>{let n=[],s=this.idb.transaction(this.store.name,"readwrite");s.oncomplete=(s=>{n.length===e.length?t({insertedCount:n.length,insertedIds:n}):r("No success")}),s.onerror=r;const o=s.objectStore(this.store.name);for(const t of e){const e=o.add(t);e.onerror=r,e.onsuccess=(t=>{n.push(e.result)})}})}getCursor(e,t=n.CursorOperation.READ,r=!1,s=null){const o=t==n.CursorOperation.READ?"readonly":"readwrite",i=this.idb.transaction(this.store.name,o).objectStore(this.store.name);return new n.Cursor(i,e,t,r,s)}find(e){return this.getCursor(e,n.CursorOperation.READ,!1)}delete(e,t,r){return this.getCursor(e,n.CursorOperation.DELETE,r).getResult().then(e=>({result:{ok:1,n:e.length},deletedCount:e.length}))}update(e,t,r,s){return this.getCursor(e,n.CursorOperation.UPDATE,s,t).getResult().then(e=>({result:{ok:1,n:e.length,nModified:e.length},connection:null,matchedCount:e.length,modifiedCount:e.length,upsertedCount:e.length,upsertedId:{_id:null}}))}deleteMany(e,t){return this.delete(e,t)}deleteOne(e,t){return this.delete(e,t,s)}updateMany(e,t,r){return this.update(e,t,r)}updateOne(e,t,r){return this.update(e,t,r,s)}}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.DELETE=0]="DELETE",e[e.UPDATE=1]="UPDATE",e[e.READ=2]="READ"}(n=t.CursorOperation||(t.CursorOperation={}));t.Cursor=class{constructor(e,t,r=n.READ,s,o){let i=this.getRequest(e,r,t),u=!1;this.result=new Promise((e,n)=>{i.onerror=(e=>{n(i.error)}),i.onsuccess=(n=>{if(s&&u)return i.onsuccess=null,e(this._result);const l=i.result;return l&&l instanceof IDBCursorWithValue?(this._result=this._result||[],u=this.executeCursorOperation(r,l,t,o),void l.continue()):(this._result=this._result||[].concat(i.result),e(this._result))})})}getRequest(e,t,r){const s=e.keyPath,o=r&&r[s];switch(t){case n.DELETE:if(!r)return e.clear();if(o)return e.delete(o);break;case n.READ:if(!r)return e.getAll();if(o)return e.get(o)}return e.openCursor()}applyFilter(e,t){let r=Object.keys(t);for(const n of r){if(n.startsWith("$"))return;if(e[n]!=t[n])return}return e}executeCursorOperation(e,t,r,s){const o=r?this.applyFilter(t.value,r):t.value;if(!o)return!1;switch(this._result.push(o),e){case n.DELETE:t.delete();break;case n.UPDATE:const r=Object.assign(o,s);t.update(r)}return!0}getResult(){return this.result}toArray(){return this.result.then(e=>Array.from(e))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,