!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(1);document.getElementById("output").innerHTML="",o.IndexedClient.connect("example").then(function(e){const t=e.db;if(document.getElementById("output").innerHTML+=`<p>DB version: ${t.version}</p>`,1==t.version)Promise.all([t.createCollection("a_simple_collection").then(function(e){e.insertOne({a:1}).then(function(e){console.log("a_simple_collection",e),document.getElementById("output").innerHTML+=`<p>a_simple_collection: ${JSON.stringify(e)}</p>`})}),t.createCollection("another_collection").then(function(e){e.insertMany([{b:2},{c:3},{d:4}]).then(function(e){console.log("another_collection",e),document.getElementById("output").innerHTML+=`<p>another_collection: ${JSON.stringify(e)}</p>`})})]).then(n=>{t.collection("another_collection").find().toArray().then(t=>{console.log(t),document.getElementById("output").innerHTML+=`<p>another_collection find all: ${JSON.stringify(t)}</p>`,e.close()})});else{t.collection("another_collection").find().toArray().then(t=>{console.log(t),document.getElementById("output").innerHTML+=`<p>another_collection find all: ${JSON.stringify(t)}</p>`,e.close()})}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(2);t.IndexedClient=class e{constructor(e){}close(e){return Promise.resolve(this.db.close())}static connect(t,n){const r=new e(t);return o.Db.open(t).then(e=>(r.db=e,r))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3);class r{constructor(e){this.idb=e,this.collectionQueue=new Set}static open(e,t){const n=self.indexedDB.open(e);return new Promise((e,t)=>{n.addEventListener("error",t),n.addEventListener("success",function(t){let o=new r(n.result);e(o)}),n.onblocked=(e=>{console.log("blocked")})})}get version(){return this.idb?this.idb.version:0}createCollection(e,t={autoIncrement:!0}){if(this.idb.objectStoreNames.contains(e))throw new Error("Collection already exists");if(!this.collectionQueue.size&&!this.DBOpenRequest){let e=this.version+1;this.idb.close(),this.DBOpenRequest=self.indexedDB.open(this.idb.name,e)}return this.collectionQueue.add(e),new Promise((n,r)=>{this.DBOpenRequest.addEventListener("error",r),this.DBOpenRequest.addEventListener("upgradeneeded",r=>{let s=this.DBOpenRequest.result;this.idb=s;const i=s.createObjectStore(e,t);i.transaction.addEventListener("complete",t=>{let r=new o.Collection(i,this.idb);this.collectionQueue.delete(e),n(r)})}),this.DBOpenRequest.onsuccess=(e=>{if(this.collectionQueue.size||!this.DBOpenRequest)throw new Error("Not all collections were created");this.DBOpenRequest=null})})}collection(e){const t=this.idb.transaction(e).objectStore(e);return new o.Collection(t,this.idb)}close(){this.idb.close()}}t.Db=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(4);t.Collection=class{constructor(e,t){this.store=e,this.idb=t}insertOne(e,t){return this.insertMany([e],t).then(e=>({insertedCount:1,insertedId:e.insertedIds[0]}))}insertMany(e,t){return new Promise((t,n)=>{let o=[],r=this.idb.transaction(this.store.name,"readwrite");r.oncomplete=(r=>{o.length===e.length?t({insertedCount:o.length,insertedIds:o}):n("No success")}),r.onerror=n;const s=r.objectStore(this.store.name);for(const t of e){const e=s.add(t);e.onerror=n,e.onsuccess=(t=>{o.push(e.result)})}})}find(e){const t=this.idb.transaction(this.store.name).objectStore(this.store.name).getAll();return new o.Cursor(t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Cursor=class{constructor(e){this.request=e}toArray(){return new Promise((e,t)=>{this.request.onerror=t,this.request.onsuccess=(t=>{e(this.request.result)})})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,