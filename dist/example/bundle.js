!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);document.getElementById("output").innerHTML="",r.IndexedClient.connect("example").then(function(e){const t=e.db;function n(e){const n=t.collection("another_collection"),r=document.getElementById("output");n.find(e).toArray().then(e=>{console.log(e),r.innerHTML+=`<p>another_collection find {b : 2}: ${JSON.stringify(e)}</p>`}).then(()=>(r.innerHTML+="<p>another_collection delete all {b : 2}, delete one {c : 3}</p>",Promise.all([n.deleteMany(e),n.deleteOne({c:3})]).then(e=>{r.innerHTML+=`<p>${JSON.stringify(e)}</p>`}))).then(()=>{});const o=t.collection("a_simple_collection"),s=document.getElementById("output1");o.find({_id:"a"}).toArray().then(e=>{console.log(e),s.innerHTML+=`<p>a_simple_collection find {_id : "a"}: ${JSON.stringify(e)}</p>`})}document.getElementById("output").innerHTML+=`<p>DB version: ${t.version}</p>`,1==t.version?Promise.all([t.createCollection("a_simple_collection",{keyPath:"_id"}).then(function(e){e.insertOne({_id:"a",a:1}).then(function(e){console.log("a_simple_collection",e),document.getElementById("output").innerHTML+=`<p>a_simple_collection: ${JSON.stringify(e)}</p>`})}),t.createCollection("another_collection").then(function(e){e.insertMany([{b:2},{c:3},{c:3},{d:4},{b:2}]).then(function(e){console.log("another_collection",e),document.getElementById("output").innerHTML+=`<p>another_collection: ${JSON.stringify(e)}</p>`})})]).then(e=>{n({b:2})}):n({b:2})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.IndexedClient=class e{constructor(e){}close(e){return Promise.resolve(this.db.close())}static connect(t,n){const o=new e(t);return r.Db.open(t).then(e=>(o.db=e,o))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);class o{constructor(e){this.idb=e,this.collectionQueue=new Set}static open(e,t){const n=self.indexedDB.open(e);return new Promise((e,t)=>{n.addEventListener("error",t),n.addEventListener("success",function(t){let r=new o(n.result);e(r)}),n.onblocked=(e=>{console.log("blocked")})})}get version(){return this.idb?this.idb.version:0}createCollection(e,t={autoIncrement:!0}){if(this.idb.objectStoreNames.contains(e))throw new Error("Collection already exists");if(!this.collectionQueue.size&&!this.DBOpenRequest){let e=this.version+1;this.idb.close(),this.DBOpenRequest=self.indexedDB.open(this.idb.name,e)}return this.collectionQueue.add(e),new Promise((n,o)=>{this.DBOpenRequest.addEventListener("error",o),this.DBOpenRequest.addEventListener("upgradeneeded",o=>{let s=this.DBOpenRequest.result;this.idb=s;const i=s.createObjectStore(e,t);i.transaction.addEventListener("complete",t=>{let o=new r.Collection(i,this.idb);this.collectionQueue.delete(e),n(o)})}),this.DBOpenRequest.onsuccess=(e=>{if(this.collectionQueue.size||!this.DBOpenRequest)throw new Error("Not all collections were created");this.DBOpenRequest=null})})}collection(e){const t=this.idb.transaction(e).objectStore(e);return new r.Collection(t,this.idb)}close(){this.idb.close()}}t.Db=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),o=!0;t.Collection=class{constructor(e,t){this.store=e,this.idb=t}insertOne(e,t){return this.insertMany([e],t).then(e=>({insertedCount:1,insertedId:e.insertedIds[0]}))}insertMany(e,t){return new Promise((t,n)=>{let r=[],o=this.idb.transaction(this.store.name,"readwrite");o.oncomplete=(o=>{r.length===e.length?t({insertedCount:r.length,insertedIds:r}):n("No success")}),o.onerror=n;const s=o.objectStore(this.store.name);for(const t of e){const e=s.add(t);e.onerror=n,e.onsuccess=(t=>{r.push(e.result)})}})}getCursor(e,t=r.CursorOperation.READ,n=!1){const o=t==r.CursorOperation.READ?"readonly":"readwrite",s=this.idb.transaction(this.store.name,o).objectStore(this.store.name);return new r.Cursor(s,e,t,n)}find(e){return this.getCursor(e,r.CursorOperation.READ)}delete(e,t=r.CursorOperation.DELETE,n,o){return this.getCursor(e,t,o).getResult().then(e=>({result:{ok:1,n:e.length},deletedCount:e.length}))}deleteMany(e,t){return this.delete(e,r.CursorOperation.DELETE,t)}deleteOne(e,t){return this.delete(e,r.CursorOperation.DELETE,t,o)}}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.DELETE=0]="DELETE",e[e.UPDATE=1]="UPDATE",e[e.READ=2]="READ"}(r=t.CursorOperation||(t.CursorOperation={}));t.Cursor=class{constructor(e,t,n=r.READ,o){let s=this.getRequest(e,n,t),i=!1;this.result=new Promise((e,r)=>{s.onerror=(e=>{r(s.error)}),s.onsuccess=(r=>{if(o&&i)return s.onsuccess=null,e(this._result);const l=s.result;return l&&l instanceof IDBCursorWithValue?(this._result=this._result||[],i=this.executeCursorOperation(n,l,t),void l.continue()):(this._result=this._result||[].concat(s.result),e(this._result))})})}getRequest(e,t,n){const o=e.keyPath,s=n&&n[o];switch(t){case r.DELETE:if(!n)return e.clear();if(s)return e.delete(s);break;case r.READ:if(!n)return e.getAll();if(s)return e.get(s)}return e.openCursor()}applyFilter(e,t){let n=Object.keys(t);for(const r of n){if(r.startsWith("$"))return;if(e[r]!=t[r])return}return e}executeCursorOperation(e,t,n){const o=n?this.applyFilter(t.value,n):t.value;if(!o)return!1;switch(this._result.push(o),e){case r.DELETE:t.delete();break;case r.UPDATE:}return!0}getResult(){return this.result}toArray(){return this.result.then(e=>Array.from(e))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,