!function(e){var t={};function n(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(o,s,function(t){return e[t]}.bind(null,s));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(1).IndexedClient.connect("example").then(function(e){1==e.version?Promise.all([e.createCollection("a_simple_collection").then(function(e){e.insertOne({a:1}).then(function(e){console.log("a_simple_collection",e)})}),e.createCollection("another_collection").then(function(e){e.insertMany([{b:2},{c:3},{d:4}]).then(function(e){console.log("another_collection",e)})})]).then(t=>{e.collection("another_collection").then(e=>{e.find().toArray().then(e=>{console.log(e)})})}):e.collection("another_collection").then(e=>{e.find().toArray().then(e=>{console.log(e)})})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(2);t.IndexedClient=class{static connect(e,t){return o.Db.open(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(3);class s{constructor(e){this.idb=e,this.collectionQueue=new Set}static open(e,t){const n=self.indexedDB.open(e);return new Promise((e,t)=>{n.addEventListener("error",t),n.addEventListener("success",function(t){let o=new s(n.result);e(o)}),n.onblocked=(e=>{console.log("blocked")})})}set openRequest(e){this.DBOpenRequest=e}get version(){return this.idb?this.idb.version:0}createCollection(e,t={autoIncrement:!0}){if(this.idb.objectStoreNames.contains(e))throw new Error("Collection already exists");if(!this.collectionQueue.size&&!this.DBOpenRequest){let e=this.version+1;this.idb.close(),this.DBOpenRequest=self.indexedDB.open(this.idb.name,e)}return this.collectionQueue.add(e),console.log(`createCollection: ${e}, collectionQueue:${this.collectionQueue.size}`),new Promise((n,s)=>{this.DBOpenRequest.addEventListener("error",s),this.DBOpenRequest.addEventListener("upgradeneeded",s=>{let r=this.DBOpenRequest.result;this.idb=r;const i=r.createObjectStore(e,t);i.transaction.addEventListener("complete",t=>{let s=new o.Collection(i,this.idb);this.collectionQueue.delete(e),n(s)})}),this.DBOpenRequest.onsuccess=(t=>{if(console.log(`DBOpenRequest 'success' collection: ${e}, collectionQueue:${this.collectionQueue.size}`),this.collectionQueue.size||!this.DBOpenRequest)throw new Error("Not all collections were created");this.DBOpenRequest=null})})}collection(e){if(this.idb.objectStoreNames.contains(e)){const t=this.idb.transaction(e).objectStore(e);return Promise.resolve(new o.Collection(t,this.idb))}return Promise.reject("No such collection")}}t.Db=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=n(4);t.Collection=class{constructor(e,t){this.store=e,this.idb=t}insertOne(e,t){return this.insertMany([e],t).then(e=>({insertedCount:1,insertedId:e.insertedIds[0]}))}insertMany(e,t){return new Promise((t,n)=>{let o=[],s=this.idb.transaction(this.store.name,"readwrite");s.oncomplete=(s=>{o.length===e.length?t({insertedCount:o.length,insertedIds:o}):n("No success")}),s.onerror=n;const r=s.objectStore(this.store.name);for(const t of e){const e=r.add(t);e.onerror=n,e.onsuccess=(t=>{o.push(e.result)})}})}find(e){const t=this.idb.transaction(this.store.name).objectStore(this.store.name).getAll();return new o.Cursor(t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Cursor=class{constructor(e){this.request=e}toArray(){return new Promise((e,t)=>{this.request.onerror=t,this.request.onsuccess=(t=>{e(this.request.result)})})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,